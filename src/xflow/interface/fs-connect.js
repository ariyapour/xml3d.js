(function(){




/**
 * The output configuration of a FragmentShader generated by Xflow.
 * @constructor
 */
Xflow.FSConfig = function(shaderCode){
    this._shaderSourceCode = shaderCode;
};



Xflow.FSConfig.prototype.getKey = function(){
    return this._shaderSourceCode;
}

Xflow.FSConfig.prototype.getOperator = function(){
    var key = this.getKey();
//    if(c_vs_operator_cache[key])
    return c_fs_operator_cache[key];

//    var outputs = [], params = [], glslCode = "\t// VS Connector\n";
//    name = "VSConnect";
//    for(var name in this._attributes){
//        var attr = this._attributes[name];
//        var type = Xflow.getTypeName(attr.type);
//        outputs.push( { type: type, name: name} );
//        params.push( { type: type, source: name, optional: attr.optional} );
//        name += "T" + type + "N" + name + "O" + attr.optional + ".";
//    }
//    var operator = Xflow.initAnonymousOperator(name,
//    {
//        outputs: outputs,
//        params:  params,
//        evaluate_shadejs: glslCode
//    });
//    c_vs_operator_cache[key] = operator;
    return operator;
}


Xflow.FragmentShader = function(programData){
    this._programData = programData;
    this._glslCode = null;
    this._inputNames = [];
    this._outputNames = [];
    this._inputInfo = {};
    this._outputInfo = {};
}

Object.defineProperty(Xflow.FragmentShader.prototype, "inputNames", {
    set: function(v){
        throw new Error("inputNames is readonly");
    },
    get: function(){ return this._inputNames; }
});

Object.defineProperty(Xflow.FragmentShader.prototype, "outputNames", {
    set: function(v){
        throw new Error("outputNames is readonly");
    },
    get: function(){ return this._outputNames; }
});

Xflow.FragmentShader.prototype.isInputUniform = function(name){
    return this._inputInfo[name].uniform;
}
Xflow.FragmentShader.prototype.getInputData = function(name){
    return this._programData.getDataEntry(this._inputInfo[name].index);
}

Xflow.FragmentShader.prototype.isOutputNull = function(name){
    return this._outputInfo[name].iteration == Xflow.ITERATION_TYPE.NULL;
}
Xflow.FragmentShader.prototype.isOutputFragmentUniform = function(name){
    return this._outputInfo[name].iteration == Xflow.ITERATION_TYPE.ONE;
}
Xflow.FragmentShader.prototype.getUniformOutputData = function(name){
    return this._programData.getDataEntry(this._outputInfo[name].index);
}
Xflow.FragmentShader.prototype.getOutputType = function(name){
    return this._outputInfo[name].type;
}
Xflow.FragmentShader.prototype.getOutputSourceName = function(name){
    return this._outputInfo[name].sourceName;
}
Xflow.FragmentShader.prototype.getGLSLCode = function(){
    return this._glslCode;
}


}());